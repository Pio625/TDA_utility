import qiskit as qk
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
from itertools import combinations
from pprint import pprint

def create_s_matrix(protein):
    pass

df = pd.read_csv("Example/vibrio_vulnificus.csv", sep=",", usecols=["x", "y","z"])
vec = df["n_atom"].to_numpy()


def generate_s_matrix(vertices, r):
    """
    Generate the S matrix (boundary matrix) for r-simplices.
    
    Parameters:
    vertices: list, tuple, or np.array of vertices
    r: dimension of the simplices
    
    Returns:
    S: boundary matrix as numpy array
    row_labels: list of r-simplices (row indices)
    col_labels: list of (r-1)-simplices (column indices)
    """
    
    # Convert to sorted list of vertices
    vertices = sorted(list(vertices))
    
    # Generate all combinations for r and r-1 simplices
    r_simplices = list(combinations(vertices, r + 1))
    r_minus_one_simplices = list(combinations(vertices, r))
    
    # Create mapping dictionaries
    row_dict = {simp: i for i, simp in enumerate(r_simplices)}
    col_dict = {simp: i for i, simp in enumerate(r_minus_one_simplices)}
    
    # Initialize S matrix
    S = np.zeros((len(r_simplices), len(r_minus_one_simplices)), dtype=int)
    
    # Fill S matrix
    for i, r_simp in enumerate(r_simplices):
        for pos in range(len(r_simp)):
            # Remove vertex at position pos
            face = r_simp[:pos] + r_simp[pos+1:]
            if face in col_dict:
                S[i, col_dict[face]] = (-1) ** pos
    
    return S, r_simplices, r_minus_one_simplices

S_2=generate_s_matrix(vec,2)

print(S_2)